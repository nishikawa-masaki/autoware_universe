// Copyright 2021 Apex.AI, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Co-developed by Tier IV, Inc. and Apex.AI, Inc.

// cspell:ignore Viridis Parula COLORMAPS VIRIDIS PARULA colormap parula
#include "tier4_perception_rviz_plugin/object_detection/detected_objects_wf_helper.hpp"

#include <algorithm>
#include <cmath>

namespace autoware
{
namespace rviz_plugins
{
namespace object_detection
{
inline std_msgs::msg::ColorRGBA makeColor(float r, float g, float b, float a = 1.0f) noexcept
{
  std_msgs::msg::ColorRGBA color;
  color.r = r;
  color.g = g;
  color.b = b;
  color.a = a;
  return color;
}

// HSV to RGB conversion helper
inline void hsvToRgb(float h, float s, float v, float & r, float & g, float & b) noexcept
{
  const float c = v * s;
  const float x = c * (1.0f - std::abs(std::fmod(h / 60.0f, 2.0f) - 1.0f));
  const float m = v - c;

  if (h < 60.0f) {
    r = c;
    g = x;
    b = 0.0f;
  } else if (h < 120.0f) {
    r = x;
    g = c;
    b = 0.0f;
  } else if (h < 180.0f) {
    r = 0.0f;
    g = c;
    b = x;
  } else if (h < 240.0f) {
    r = 0.0f;
    g = x;
    b = c;
  } else if (h < 300.0f) {
    r = x;
    g = 0.0f;
    b = c;
  } else {
    r = c;
    g = 0.0f;
    b = x;
  }

  r += m;
  g += m;
  b += m;
}

constexpr std::array<std::array<float, 3>, 256> VIRIDIS_COLORMAP = {
  {{0.267004, 0.004874, 0.329415}, {0.268510, 0.009605, 0.335427}, {0.269944, 0.014625, 0.341379},
   {0.271305, 0.019942, 0.347269}, {0.272594, 0.025563, 0.353093}, {0.273809, 0.031497, 0.358853},
   {0.274952, 0.037752, 0.364543}, {0.276022, 0.044167, 0.370164}, {0.277018, 0.050344, 0.375715},
   {0.277941, 0.056324, 0.381191}, {0.278791, 0.062145, 0.386592}, {0.279566, 0.067836, 0.391917},
   {0.280267, 0.073417, 0.397163}, {0.280894, 0.078907, 0.402329}, {0.281446, 0.084320, 0.407414},
   {0.281924, 0.089666, 0.412415}, {0.282327, 0.094955, 0.417331}, {0.282656, 0.100196, 0.422160},
   {0.282910, 0.105393, 0.426902}, {0.283091, 0.110553, 0.431554}, {0.283197, 0.115680, 0.436115},
   {0.283229, 0.120777, 0.440584}, {0.283187, 0.125848, 0.444960}, {0.283072, 0.130895, 0.449241},
   {0.282884, 0.135920, 0.453427}, {0.282623, 0.140926, 0.457517}, {0.282290, 0.145912, 0.461510},
   {0.281887, 0.150881, 0.465405}, {0.281412, 0.155834, 0.469201}, {0.280868, 0.160771, 0.472899},
   {0.280255, 0.165693, 0.476498}, {0.279574, 0.170599, 0.479997}, {0.278826, 0.175490, 0.483397},
   {0.278012, 0.180367, 0.486697}, {0.277134, 0.185228, 0.489898}, {0.276194, 0.190074, 0.493001},
   {0.275191, 0.194905, 0.496005}, {0.274128, 0.199721, 0.498911}, {0.273006, 0.204520, 0.501721},
   {0.271828, 0.209303, 0.504434}, {0.270595, 0.214069, 0.507052}, {0.269308, 0.218818, 0.509577},
   {0.267968, 0.223549, 0.512008}, {0.266580, 0.228262, 0.514349}, {0.265145, 0.232956, 0.516599},
   {0.263663, 0.237631, 0.518762}, {0.262138, 0.242286, 0.520837}, {0.260571, 0.246922, 0.522828},
   {0.258965, 0.251537, 0.524736}, {0.257322, 0.256130, 0.526563}, {0.255645, 0.260703, 0.528312},
   {0.253935, 0.265254, 0.529983}, {0.252194, 0.269783, 0.531579}, {0.250425, 0.274290, 0.533103},
   {0.248629, 0.278775, 0.534556}, {0.246811, 0.283237, 0.535941}, {0.244972, 0.287675, 0.537260},
   {0.243113, 0.292092, 0.538516}, {0.241237, 0.296485, 0.539709}, {0.239346, 0.300855, 0.540844},
   {0.237441, 0.305202, 0.541921}, {0.235526, 0.309527, 0.542944}, {0.233603, 0.313828, 0.543914},
   {0.231674, 0.318106, 0.544834}, {0.229739, 0.322361, 0.545706}, {0.227802, 0.326594, 0.546532},
   {0.225863, 0.330805, 0.547314}, {0.223925, 0.334994, 0.548053}, {0.221989, 0.339161, 0.548752},
   {0.220057, 0.343307, 0.549413}, {0.218130, 0.347432, 0.550038}, {0.216210, 0.351535, 0.550627},
   {0.214298, 0.355619, 0.551184}, {0.212395, 0.359683, 0.551710}, {0.210503, 0.363727, 0.552206},
   {0.208623, 0.367752, 0.552675}, {0.206756, 0.371758, 0.553117}, {0.204903, 0.375746, 0.553533},
   {0.203063, 0.379716, 0.553925}, {0.201239, 0.383670, 0.554294}, {0.199430, 0.387607, 0.554642},
   {0.197636, 0.391528, 0.554969}, {0.195860, 0.395433, 0.555276}, {0.194100, 0.399323, 0.555565},
   {0.192357, 0.403199, 0.555836}, {0.190631, 0.407061, 0.556089}, {0.188923, 0.410910, 0.556326},
   {0.187231, 0.414746, 0.556547}, {0.185556, 0.418570, 0.556753}, {0.183898, 0.422383, 0.556944},
   {0.182256, 0.426184, 0.557120}, {0.180629, 0.429975, 0.557282}, {0.179019, 0.433756, 0.557430},
   {0.177423, 0.437527, 0.557565}, {0.175841, 0.441290, 0.557685}, {0.174274, 0.445044, 0.557792},
   {0.172719, 0.448791, 0.557885}, {0.171176, 0.452530, 0.557965}, {0.169646, 0.456262, 0.558030},
   {0.168126, 0.459988, 0.558082}, {0.166617, 0.463708, 0.558119}, {0.165117, 0.467423, 0.558141},
   {0.163625, 0.471133, 0.558148}, {0.162142, 0.474838, 0.558140}, {0.160665, 0.478540, 0.558115},
   {0.159194, 0.482237, 0.558073}, {0.157729, 0.485932, 0.558013}, {0.156270, 0.489624, 0.557936},
   {0.154815, 0.493313, 0.557840}, {0.153364, 0.497000, 0.557724}, {0.151918, 0.500685, 0.557587},
   {0.150476, 0.504369, 0.557430}, {0.149039, 0.508051, 0.557250}, {0.147607, 0.511733, 0.557049},
   {0.146180, 0.515413, 0.556823}, {0.144759, 0.519093, 0.556572}, {0.143343, 0.522773, 0.556295},
   {0.141935, 0.526453, 0.555991}, {0.140536, 0.530132, 0.555659}, {0.139147, 0.533812, 0.555298},
   {0.137770, 0.537492, 0.554906}, {0.136408, 0.541173, 0.554483}, {0.135066, 0.544853, 0.554029},
   {0.133743, 0.548535, 0.553541}, {0.132444, 0.552216, 0.553018}, {0.131172, 0.555899, 0.552459},
   {0.129933, 0.559582, 0.551864}, {0.128729, 0.563265, 0.551229}, {0.127568, 0.566949, 0.550556},
   {0.126453, 0.570633, 0.549841}, {0.125394, 0.574318, 0.549086}, {0.124395, 0.578002, 0.548287},
   {0.123463, 0.581687, 0.547445}, {0.122606, 0.585371, 0.546557}, {0.121831, 0.589055, 0.545623},
   {0.121148, 0.592739, 0.544641}, {0.120565, 0.596422, 0.543611}, {0.120092, 0.600104, 0.542530},
   {0.119738, 0.603785, 0.541400}, {0.119512, 0.607464, 0.540218}, {0.119423, 0.611141, 0.538982},
   {0.119483, 0.614817, 0.537692}, {0.119699, 0.618490, 0.536347}, {0.120081, 0.622161, 0.534946},
   {0.120638, 0.625828, 0.533488}, {0.121380, 0.629492, 0.531973}, {0.122312, 0.633153, 0.530398},
   {0.123444, 0.636809, 0.528763}, {0.124780, 0.640461, 0.527068}, {0.126326, 0.644107, 0.525311},
   {0.128087, 0.647749, 0.523491}, {0.130067, 0.651384, 0.521608}, {0.132268, 0.655014, 0.519661},
   {0.134692, 0.658636, 0.517649}, {0.137339, 0.662252, 0.515571}, {0.140210, 0.665859, 0.513427},
   {0.143303, 0.669459, 0.511215}, {0.146616, 0.673050, 0.508936}, {0.150148, 0.676631, 0.506589},
   {0.153894, 0.680203, 0.504172}, {0.157851, 0.683765, 0.501686}, {0.162016, 0.687316, 0.499129},
   {0.166383, 0.690856, 0.496502}, {0.170948, 0.694384, 0.493803}, {0.175707, 0.697900, 0.491033},
   {0.180653, 0.701402, 0.488189}, {0.185783, 0.704891, 0.485273}, {0.191090, 0.708366, 0.482284},
   {0.196571, 0.711827, 0.479221}, {0.202219, 0.715272, 0.476084}, {0.208030, 0.718701, 0.472873},
   {0.214000, 0.722114, 0.469588}, {0.220124, 0.725509, 0.466226}, {0.226397, 0.728888, 0.462789},
   {0.232815, 0.732247, 0.459277}, {0.239374, 0.735588, 0.455688}, {0.246070, 0.738910, 0.452024},
   {0.252899, 0.742211, 0.448284}, {0.259857, 0.745492, 0.444467}, {0.266941, 0.748751, 0.440573},
   {0.274149, 0.751988, 0.436601}, {0.281477, 0.755203, 0.432552}, {0.288921, 0.758394, 0.428426},
   {0.296479, 0.761561, 0.424223}, {0.304148, 0.764704, 0.419943}, {0.311925, 0.767822, 0.415586},
   {0.319809, 0.770914, 0.411152}, {0.327796, 0.773980, 0.406640}, {0.335885, 0.777018, 0.402049},
   {0.344074, 0.780029, 0.397381}, {0.352360, 0.783011, 0.392636}, {0.360741, 0.785964, 0.387814},
   {0.369214, 0.788888, 0.382914}, {0.377779, 0.791781, 0.377939}, {0.386433, 0.794644, 0.372886},
   {0.395174, 0.797475, 0.367757}, {0.404001, 0.800275, 0.362552}, {0.412913, 0.803041, 0.357269},
   {0.421908, 0.805774, 0.351910}, {0.430983, 0.808473, 0.346476}, {0.440137, 0.811138, 0.340967},
   {0.449368, 0.813768, 0.335384}, {0.458674, 0.816363, 0.329727}, {0.468053, 0.818921, 0.323998},
   {0.477504, 0.821444, 0.318195}, {0.487026, 0.823929, 0.312321}, {0.496615, 0.826376, 0.306377},
   {0.506271, 0.828786, 0.300362}, {0.515992, 0.831158, 0.294279}, {0.525776, 0.833491, 0.288127},
   {0.535621, 0.835785, 0.281908}, {0.545524, 0.838039, 0.275626}, {0.555484, 0.840254, 0.269281},
   {0.565498, 0.842430, 0.262877}, {0.575563, 0.844566, 0.256415}, {0.585678, 0.846661, 0.249897},
   {0.595839, 0.848717, 0.243329}, {0.606045, 0.850733, 0.236712}, {0.616293, 0.852709, 0.230052},
   {0.626579, 0.854645, 0.223353}, {0.636902, 0.856542, 0.216620}, {0.647257, 0.858400, 0.209861},
   {0.657642, 0.860219, 0.203082}, {0.668054, 0.861999, 0.196293}, {0.678489, 0.863742, 0.189503},
   {0.688944, 0.865448, 0.182725}, {0.699415, 0.867117, 0.175971}, {0.709898, 0.868751, 0.169257},
   {0.720391, 0.870350, 0.162603}, {0.730889, 0.871916, 0.156029}, {0.741388, 0.873449, 0.149561},
   {0.751884, 0.874951, 0.143228}, {0.762373, 0.876424, 0.137064}, {0.772852, 0.877868, 0.131109},
   {0.783315, 0.879285, 0.125405}, {0.793760, 0.880678, 0.120005}, {0.804182, 0.882046, 0.114965},
   {0.814576, 0.883393, 0.110347}, {0.824940, 0.884720, 0.106217}, {0.835270, 0.886029, 0.102646},
   {0.845561, 0.887322, 0.099702}, {0.855810, 0.888601, 0.097452}, {0.866013, 0.889868, 0.095953},
   {0.876168, 0.891125, 0.095250}, {0.886271, 0.892374, 0.095374}, {0.896320, 0.893616, 0.096335},
   {0.906311, 0.894855, 0.098125}, {0.916242, 0.896091, 0.100717}, {0.926106, 0.897330, 0.104071},
   {0.935904, 0.898570, 0.108131}, {0.945636, 0.899815, 0.112838}, {0.955300, 0.901065, 0.118128},
   {0.964894, 0.902323, 0.123941}, {0.974417, 0.903590, 0.130215}, {0.983868, 0.904867, 0.136897},
   {0.993248, 0.906157, 0.143936}}};

constexpr std::array<std::array<float, 3>, 256> TURBO_COLORMAP = {
  {{0.18995f, 0.07176f, 0.23217f}, {0.19483f, 0.08339f, 0.26149f}, {0.19956f, 0.09498f, 0.29024f},
   {0.20415f, 0.10652f, 0.31844f}, {0.20860f, 0.11802f, 0.34607f}, {0.21291f, 0.12947f, 0.37314f},
   {0.21708f, 0.14087f, 0.39964f}, {0.22111f, 0.15223f, 0.42558f}, {0.22500f, 0.16354f, 0.45096f},
   {0.22875f, 0.17481f, 0.47578f}, {0.23236f, 0.18603f, 0.50004f}, {0.23582f, 0.19720f, 0.52373f},
   {0.23915f, 0.20833f, 0.54686f}, {0.24234f, 0.21941f, 0.56942f}, {0.24539f, 0.23044f, 0.59142f},
   {0.24830f, 0.24143f, 0.61286f}, {0.25107f, 0.25237f, 0.63374f}, {0.25369f, 0.26327f, 0.65406f},
   {0.25618f, 0.27412f, 0.67381f}, {0.25853f, 0.28492f, 0.69300f}, {0.26074f, 0.29568f, 0.71162f},
   {0.26280f, 0.30639f, 0.72968f}, {0.26473f, 0.31706f, 0.74718f}, {0.26652f, 0.32768f, 0.76412f},
   {0.26816f, 0.33825f, 0.78050f}, {0.26967f, 0.34878f, 0.79631f}, {0.27103f, 0.35926f, 0.81156f},
   {0.27226f, 0.36970f, 0.82624f}, {0.27334f, 0.38008f, 0.84037f}, {0.27429f, 0.39043f, 0.85393f},
   {0.27509f, 0.40072f, 0.86692f}, {0.27576f, 0.41097f, 0.87936f}, {0.27628f, 0.42118f, 0.89123f},
   {0.27667f, 0.43134f, 0.90254f}, {0.27691f, 0.44145f, 0.91328f}, {0.27701f, 0.45152f, 0.92347f},
   {0.27698f, 0.46153f, 0.93309f}, {0.27680f, 0.47151f, 0.94214f}, {0.27648f, 0.48144f, 0.95064f},
   {0.27603f, 0.49132f, 0.95857f}, {0.27543f, 0.50115f, 0.96594f}, {0.27469f, 0.51094f, 0.97275f},
   {0.27381f, 0.52069f, 0.97899f}, {0.27273f, 0.53040f, 0.98461f}, {0.27106f, 0.54015f, 0.98930f},
   {0.26878f, 0.54995f, 0.99303f}, {0.26592f, 0.55979f, 0.99583f}, {0.26252f, 0.56967f, 0.99773f},
   {0.25862f, 0.57958f, 0.99876f}, {0.25425f, 0.58950f, 0.99896f}, {0.24946f, 0.59943f, 0.99835f},
   {0.24427f, 0.60937f, 0.99697f}, {0.23874f, 0.61931f, 0.99485f}, {0.23288f, 0.62923f, 0.99202f},
   {0.22676f, 0.63913f, 0.98851f}, {0.22039f, 0.64901f, 0.98436f}, {0.21382f, 0.65886f, 0.97959f},
   {0.20708f, 0.66866f, 0.97423f}, {0.20021f, 0.67842f, 0.96833f}, {0.19326f, 0.68812f, 0.96190f},
   {0.18625f, 0.69775f, 0.95498f}, {0.17923f, 0.70732f, 0.94761f}, {0.17223f, 0.71680f, 0.93981f},
   {0.16529f, 0.72620f, 0.93161f}, {0.15844f, 0.73551f, 0.92305f}, {0.15173f, 0.74472f, 0.91416f},
   {0.14519f, 0.75381f, 0.90496f}, {0.13886f, 0.76279f, 0.89550f}, {0.13278f, 0.77165f, 0.88580f},
   {0.12698f, 0.78037f, 0.87590f}, {0.12151f, 0.78896f, 0.86581f}, {0.11639f, 0.79740f, 0.85559f},
   {0.11167f, 0.80569f, 0.84525f}, {0.10738f, 0.81381f, 0.83484f}, {0.10357f, 0.82177f, 0.82437f},
   {0.10026f, 0.82955f, 0.81389f}, {0.09750f, 0.83714f, 0.80342f}, {0.09532f, 0.84455f, 0.79299f},
   {0.09377f, 0.85175f, 0.78264f}, {0.09287f, 0.85875f, 0.77240f}, {0.09267f, 0.86554f, 0.76230f},
   {0.09320f, 0.87211f, 0.75237f}, {0.09451f, 0.87844f, 0.74265f}, {0.09662f, 0.88454f, 0.73316f},
   {0.09958f, 0.89040f, 0.72393f}, {0.10342f, 0.89600f, 0.71500f}, {0.10815f, 0.90142f, 0.70599f},
   {0.11374f, 0.90673f, 0.69651f}, {0.12014f, 0.91193f, 0.68660f}, {0.12733f, 0.91701f, 0.67627f},
   {0.13526f, 0.92197f, 0.66556f}, {0.14391f, 0.92680f, 0.65448f}, {0.15323f, 0.93151f, 0.64308f},
   {0.16319f, 0.93609f, 0.63137f}, {0.17377f, 0.94053f, 0.61938f}, {0.18491f, 0.94484f, 0.60713f},
   {0.19659f, 0.94901f, 0.59466f}, {0.20877f, 0.95304f, 0.58199f}, {0.22142f, 0.95692f, 0.56914f},
   {0.23449f, 0.96065f, 0.55614f}, {0.24797f, 0.96423f, 0.54303f}, {0.26180f, 0.96765f, 0.52981f},
   {0.27597f, 0.97092f, 0.51653f}, {0.29042f, 0.97403f, 0.50321f}, {0.30513f, 0.97697f, 0.48987f},
   {0.32006f, 0.97974f, 0.47654f}, {0.33517f, 0.98234f, 0.46325f}, {0.35043f, 0.98477f, 0.45002f},
   {0.36581f, 0.98702f, 0.43688f}, {0.38127f, 0.98909f, 0.42386f}, {0.39678f, 0.99098f, 0.41098f},
   {0.41229f, 0.99268f, 0.39826f}, {0.42778f, 0.99419f, 0.38575f}, {0.44321f, 0.99551f, 0.37345f},
   {0.45854f, 0.99663f, 0.36140f}, {0.47375f, 0.99755f, 0.34963f}, {0.48879f, 0.99828f, 0.33816f},
   {0.50362f, 0.99879f, 0.32701f}, {0.51822f, 0.99910f, 0.31622f}, {0.53255f, 0.99919f, 0.30581f},
   {0.54658f, 0.99907f, 0.29581f}, {0.56026f, 0.99873f, 0.28623f}, {0.57357f, 0.99817f, 0.27712f},
   {0.58646f, 0.99739f, 0.26849f}, {0.59891f, 0.99638f, 0.26038f}, {0.61088f, 0.99514f, 0.25280f},
   {0.62233f, 0.99366f, 0.24579f}, {0.63323f, 0.99195f, 0.23937f}, {0.64362f, 0.98999f, 0.23356f},
   {0.65394f, 0.98775f, 0.22835f}, {0.66428f, 0.98524f, 0.22370f}, {0.67462f, 0.98246f, 0.21960f},
   {0.68494f, 0.97941f, 0.21602f}, {0.69525f, 0.97610f, 0.21294f}, {0.70553f, 0.97255f, 0.21032f},
   {0.71577f, 0.96875f, 0.20815f}, {0.72596f, 0.96470f, 0.20640f}, {0.73610f, 0.96043f, 0.20504f},
   {0.74617f, 0.95593f, 0.20406f}, {0.75617f, 0.95121f, 0.20343f}, {0.76608f, 0.94627f, 0.20311f},
   {0.77591f, 0.94113f, 0.20310f}, {0.78563f, 0.93579f, 0.20336f}, {0.79524f, 0.93025f, 0.20386f},
   {0.80473f, 0.92452f, 0.20459f}, {0.81410f, 0.91861f, 0.20552f}, {0.82333f, 0.91253f, 0.20663f},
   {0.83241f, 0.90627f, 0.20788f}, {0.84133f, 0.89986f, 0.20926f}, {0.85010f, 0.89328f, 0.21074f},
   {0.85868f, 0.88655f, 0.21230f}, {0.86709f, 0.87968f, 0.21391f}, {0.87530f, 0.87267f, 0.21555f},
   {0.88331f, 0.86553f, 0.21719f}, {0.89112f, 0.85826f, 0.21880f}, {0.89870f, 0.85087f, 0.22038f},
   {0.90605f, 0.84337f, 0.22188f}, {0.91317f, 0.83576f, 0.22328f}, {0.92004f, 0.82806f, 0.22456f},
   {0.92666f, 0.82025f, 0.22570f}, {0.93301f, 0.81236f, 0.22667f}, {0.93909f, 0.80439f, 0.22744f},
   {0.94489f, 0.79634f, 0.22800f}, {0.95039f, 0.78823f, 0.22831f}, {0.95560f, 0.78005f, 0.22836f},
   {0.96049f, 0.77181f, 0.22811f}, {0.96507f, 0.76352f, 0.22754f}, {0.96931f, 0.75519f, 0.22663f},
   {0.97323f, 0.74682f, 0.22536f}, {0.97679f, 0.73842f, 0.22369f}, {0.98000f, 0.73000f, 0.22161f},
   {0.98289f, 0.72140f, 0.21918f}, {0.98549f, 0.71250f, 0.21650f}, {0.98781f, 0.70330f, 0.21358f},
   {0.98986f, 0.69382f, 0.21043f}, {0.99163f, 0.68408f, 0.20706f}, {0.99314f, 0.67408f, 0.20348f},
   {0.99438f, 0.66386f, 0.19971f}, {0.99535f, 0.65341f, 0.19577f}, {0.99607f, 0.64277f, 0.19165f},
   {0.99654f, 0.63193f, 0.18738f}, {0.99675f, 0.62093f, 0.18297f}, {0.99672f, 0.60977f, 0.17842f},
   {0.99644f, 0.59846f, 0.17376f}, {0.99593f, 0.58703f, 0.16899f}, {0.99517f, 0.57549f, 0.16412f},
   {0.99419f, 0.56386f, 0.15918f}, {0.99297f, 0.55214f, 0.15417f}, {0.99153f, 0.54036f, 0.14910f},
   {0.98987f, 0.52854f, 0.14398f}, {0.98799f, 0.51667f, 0.13883f}, {0.98590f, 0.50479f, 0.13367f},
   {0.98360f, 0.49291f, 0.12849f}, {0.98108f, 0.48104f, 0.12332f}, {0.97837f, 0.46920f, 0.11817f},
   {0.97545f, 0.45740f, 0.11305f}, {0.97234f, 0.44565f, 0.10797f}, {0.96904f, 0.43399f, 0.10294f},
   {0.96555f, 0.42241f, 0.09798f}, {0.96187f, 0.41093f, 0.09310f}, {0.95801f, 0.39958f, 0.08831f},
   {0.95398f, 0.38836f, 0.08362f}, {0.94977f, 0.37729f, 0.07905f}, {0.94538f, 0.36638f, 0.07461f},
   {0.94084f, 0.35566f, 0.07031f}, {0.93612f, 0.34513f, 0.06616f}, {0.93125f, 0.33482f, 0.06218f},
   {0.92623f, 0.32473f, 0.05837f}, {0.92105f, 0.31489f, 0.05475f}, {0.91572f, 0.30530f, 0.05134f},
   {0.91024f, 0.29599f, 0.04814f}, {0.90463f, 0.28696f, 0.04516f}, {0.89888f, 0.27824f, 0.04243f},
   {0.89298f, 0.26981f, 0.03993f}, {0.88691f, 0.26152f, 0.03753f}, {0.88066f, 0.25334f, 0.03521f},
   {0.87422f, 0.24526f, 0.03297f}, {0.86760f, 0.23730f, 0.03082f}, {0.86079f, 0.22945f, 0.02875f},
   {0.85380f, 0.22170f, 0.02677f}, {0.84662f, 0.21407f, 0.02487f}, {0.83926f, 0.20654f, 0.02305f},
   {0.83172f, 0.19912f, 0.02131f}, {0.82399f, 0.19182f, 0.01966f}, {0.81608f, 0.18462f, 0.01809f},
   {0.80799f, 0.17753f, 0.01660f}, {0.79971f, 0.17055f, 0.01520f}, {0.79125f, 0.16368f, 0.01387f},
   {0.78260f, 0.15693f, 0.01264f}, {0.77377f, 0.15028f, 0.01148f}, {0.76476f, 0.14374f, 0.01041f},
   {0.75556f, 0.13731f, 0.00942f}, {0.74617f, 0.13098f, 0.00851f}, {0.73661f, 0.12477f, 0.00769f},
   {0.72686f, 0.11867f, 0.00695f}, {0.71692f, 0.11268f, 0.00629f}, {0.70680f, 0.10680f, 0.00571f},
   {0.69650f, 0.10102f, 0.00522f}, {0.68602f, 0.09536f, 0.00481f}, {0.67535f, 0.08980f, 0.00449f},
   {0.66449f, 0.08436f, 0.00424f}, {0.65345f, 0.07902f, 0.00408f}, {0.64223f, 0.07380f, 0.00401f},
   {0.63082f, 0.06868f, 0.00401f}, {0.61923f, 0.06367f, 0.00410f}, {0.60746f, 0.05878f, 0.00427f},
   {0.59550f, 0.05399f, 0.00453f}, {0.58336f, 0.04931f, 0.00486f}, {0.57103f, 0.04474f, 0.00529f},
   {0.55852f, 0.04028f, 0.00579f}, {0.54583f, 0.03593f, 0.00638f}, {0.53295f, 0.03169f, 0.00705f},
   {0.51989f, 0.02756f, 0.00780f}, {0.50664f, 0.02354f, 0.00863f}, {0.49321f, 0.01963f, 0.00955f},
   {0.47960f, 0.01583f, 0.01055f}}};

std_msgs::msg::ColorRGBA generateDistinctColor(size_t idx)
{
  constexpr float HUE_SPACING = 47.0f;  // A prime number for good spacing
  constexpr float MAX_HUE = 360.0f;
  constexpr float SATURATION = 0.9f;
  constexpr float VALUE = 0.95f;

  float r, g, b;
  const float hue = std::fmod(static_cast<float>(idx) * HUE_SPACING, MAX_HUE);
  hsvToRgb(hue, SATURATION, VALUE, r, g, b);

  return makeColor(r, g, b);
}

std_msgs::msg::ColorRGBA colormapJet(float v)
{
  v = std::clamp(v, 0.0f, 1.0f);
  float r = std::clamp(1.5f - std::abs(4.0f * v - 3.0f), 0.0f, 1.0f);
  float g = std::clamp(1.5f - std::abs(4.0f * v - 2.0f), 0.0f, 1.0f);
  float b = std::clamp(1.5f - std::abs(4.0f * v - 1.0f), 0.0f, 1.0f);
  return makeColor(r, g, b);
}

std_msgs::msg::ColorRGBA colormapViridis(float v)
{
  v = std::clamp(v, 0.0f, 1.0f);
  int index = static_cast<int>(v * 255.0f);
  const auto & color = VIRIDIS_COLORMAP[index];
  return makeColor(color[0], color[1], color[2]);
}

std_msgs::msg::ColorRGBA colormapHSV(float v)
{
  v = std::clamp(v, 0.0f, 1.0f);
  float r, g, b;
  hsvToRgb(v * 360.0f, 1.0f, 0.5f, r, g, b);
  return makeColor(r, g, b);
}

std_msgs::msg::ColorRGBA colormapRed(float v)
{
  return makeColor(std::clamp(v, 0.0f, 1.0f), 0.0f, 0.0f);
}

std_msgs::msg::ColorRGBA colormapGray(float value)
{
  value = std::clamp(value, 0.0f, 1.0f);
  return makeColor(value, value, value);
}

std_msgs::msg::ColorRGBA colormapTurbo(float x)
{
  x = std::clamp(x, 0.0f, 1.0f);

  int index = static_cast<int>(x * 255.0f);
  const auto & color = TURBO_COLORMAP[index];
  return makeColor(color[0], color[1], color[2]);
}
std_msgs::msg::ColorRGBA colormapRainbow(float v)
{
  v = std::clamp(v, 0.0f, 1.0f);
  float r = std::sin(2.0f * M_PI * v + 0.0f) * 0.5f + 0.5f;
  float g = std::sin(2.0f * M_PI * v + 2.0f * M_PI / 3.0f) * 0.5f + 0.5f;
  float b = std::sin(2.0f * M_PI * v + 4.0f * M_PI / 3.0f) * 0.5f + 0.5f;
  return makeColor(r, g, b);
}

std_msgs::msg::ColorRGBA colormapParula(float v)
{
  v = std::clamp(v, 0.0f, 1.0f);
  static const std::array<std::array<float, 3>, 6> parula_data = {
    {{0.2081f, 0.1663f, 0.5292f},
     {0.2291f, 0.3220f, 0.5451f},
     {0.2669f, 0.4887f, 0.5561f},
     {0.3052f, 0.6502f, 0.5653f},
     {0.5849f, 0.7823f, 0.4863f},
     {0.9763f, 0.9831f, 0.0538f}}};

  float scaled = v * (parula_data.size() - 1);
  int idx1 = static_cast<int>(scaled);
  float frac = scaled - static_cast<float>(idx1);

  idx1 = std::max(0, std::min(idx1, static_cast<int>(parula_data.size()) - 2));
  int idx2 = std::min(idx1 + 1, static_cast<int>(parula_data.size()) - 1);

  float r = (1 - frac) * parula_data[idx1][0] + frac * parula_data[idx2][0];
  float g = (1 - frac) * parula_data[idx1][1] + frac * parula_data[idx2][1];
  float b = (1 - frac) * parula_data[idx1][2] + frac * parula_data[idx2][2];
  return makeColor(r, g, b);
}

ColorbarWidget::ColorbarWidget(QWidget * parent)
: QWidget(parent),
  m_font("Arial", 9),
  m_textColor(Qt::white),
  m_tickColor(Qt::white),
  m_backgroundColor(0, 0, 0, 180)
{
  setFixedSize(100, 300);
  setWindowTitle("Colorbar");
  m_font.setBold(true);
}

void ColorbarWidget::setColorbarImage(const QImage & image)
{
  m_colorbar_image = image;
  update();  // Trigger a repaint
}
void ColorbarWidget::setMinMax(float min_value, float max_value)
{
  m_min_value = min_value;
  m_max_value = max_value;
  update();
}

void ColorbarWidget::paintEvent(QPaintEvent * event)
{
  Q_UNUSED(event);

  QPainter painter(this);
  painter.setRenderHint(QPainter::Antialiasing);

  // Constants for layout
  constexpr int colorbarWidth = 30;
  constexpr int colorbarX = 10;
  constexpr int colorbarY = 40;
  const int colorbarHeight = height() - 80;
  constexpr int numTicks = 5;

  painter.drawImage(
    QRect(colorbarX, colorbarY, colorbarWidth, colorbarHeight),
    m_colorbar_image.scaled(colorbarWidth, colorbarHeight));

  // Draw frame around colorbar
  painter.setPen(QPen(m_tickColor, 1.5));
  painter.drawRect(colorbarX, colorbarY, colorbarWidth, colorbarHeight);

  // Draw title
  painter.setFont(m_font);
  painter.setPen(m_textColor);
  painter.drawText(QRect(0, 10, width(), 20), Qt::AlignCenter, m_title);

  // Draw ticks and labels
  for (int i = 1; i < numTicks; ++i) {
    const float value =
      m_min_value + (m_max_value - m_min_value) * (i / static_cast<float>(numTicks));
    const int yPos = colorbarY + colorbarHeight - (i * colorbarHeight / numTicks);

    // Draw tick
    painter.setPen(QPen(m_tickColor, 2.0));
    painter.drawLine(colorbarX + colorbarWidth, yPos, colorbarX + colorbarWidth + 5, yPos);

    // Draw value label
    QString label = QString::number(value, 'f', 1);
    QRect labelRect(
      colorbarX + colorbarWidth + 10, yPos - 10, width() - colorbarX - colorbarWidth - 15, 20);

    painter.setPen(m_textColor);
    painter.drawText(labelRect, Qt::AlignLeft | Qt::AlignVCenter, label);
  }
  painter.setPen(QPen(m_tickColor, 2.5));  // Thicker for min/max

  // Min tick (bottom)
  int minY = colorbarY + colorbarHeight;
  painter.drawLine(colorbarX + colorbarWidth, minY, colorbarX + colorbarWidth + 10, minY);

  // Max tick (top)
  int maxY = colorbarY;
  painter.drawLine(colorbarX + colorbarWidth, maxY, colorbarX + colorbarWidth + 10, maxY);
  // Draw min/max labels (more prominent)
  painter.setPen(QPen(m_textColor, 1.5));
  QFont boldFont = m_font;
  boldFont.setPointSize(11);
  painter.setFont(boldFont);

  // Min value
  QRect minRect(
    colorbarX + colorbarWidth + 12, colorbarY + colorbarHeight - 15,
    width() - colorbarX - colorbarWidth - 20, 25);
  painter.drawText(minRect, Qt::AlignLeft | Qt::AlignVCenter, QString::number(m_min_value, 'f', 1));

  // Max value
  QRect maxRect(
    colorbarX + colorbarWidth + 12, colorbarY - 15, width() - colorbarX - colorbarWidth - 20, 25);
  painter.drawText(maxRect, Qt::AlignLeft | Qt::AlignVCenter, QString::number(m_max_value, 'f', 1));
}

const ColormapInfo & getColormapInfo()
{
  static const std::array<const char *, NUM_COLORMAPS> names = {
    "Jet", "HSV", "Viridis", "Red", "Gray", "Turbo", "Rainbow", "Parula"};
  static const std::array<ColormapFuncType, NUM_COLORMAPS> functions = {
    colormapJet,  colormapHSV,   colormapViridis, colormapRed,
    colormapGray, colormapTurbo, colormapRainbow, colormapParula};
  static const ColormapInfo info{names, functions};
  return info;
}

}  // namespace object_detection
}  // namespace rviz_plugins
}  // namespace autoware
